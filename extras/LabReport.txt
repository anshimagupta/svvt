LAB REPORT - TDD

Name: Anshima Gupta
Andrew ID: anshimag

1. Summary 

// Describe briefly what you did during this lab.
// List the tasks performed and completed. 
// List which tasks are outstanding or partially completed.
// Use bullet points. 

1.1 I watched the video before attempting the lab.
1.2 I had not completed the warm up exercise before the 
    lab but so took time to understand the expectations and code structure.
1.3 I went through each and every task required one by one.
1.4 I was able to make SocialNetwork implement the given interface
1.5 I also implemented the login method.
1.6 I could also write code to check if a user is a part of social network or not.
1.6 B3 - B9 are still pending. I am going to try and complete them too for my own understanding.
 
2. Lessons Learned

2.1 TDD is an approach which helps to write fault tolerant code.
2.2 It is easier to code, when you know the flow.
2.3 However, many of the corner or edge cases might be left out
    due to not thinking of all the test cases
2.4 To cover each new functionality a test was first written.
2.5 To write a test user must clearly understand the specification and requirements
2.6 Code becomes clearer and exactly as what it is expected to do.
2.7 The TDD unit is small and related to a particular function.
2.8 I learnt that coding, testing and design are interwoven.
2.9 The approach to write a single test, run it, write code to pass the test,
    refactor code and repeat worked
2.10 I realized writing too many cases at once is not a good idea.
2.11 It is not easy to realize the flow in the beginning. It might take some time.
2.12 The biggest challenge is to decide the what goes into the test.
2.13 I will understand the flow of the application clearly next time.
2.14 I will increase expressiveness and remove duplication from tests.
2.15 I will write more specific test cases next time.
2.16 Also, I need to practice more to write more code when test is failing
2.17 I am not in the habit to rerun all the test when the implementation changes
2.18.I learnt that it is a good idea to refactor when all test pass.
2.19 I think writing assertions first and action later is difficult.


3. Suggestions for Improvements (Optional)

3.1 Pair programming will help.
3.2 The class could be given one specific example to try. 


/** This report should be about one page long. **/
